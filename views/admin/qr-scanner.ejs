<% layout('partials/boilerplate') -%>

<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-md-8">
      <div class="card shadow">
        <div class="card-header bg-primary text-white">
          <h2>üé´ QR Code Ticket Validation</h2>
        </div>
        <div class="card-body">
          <div class="mb-4">
            <label class="form-label">Enter Booking ID or QR Code</label>
            <div class="input-group">
              <input type="text" id="bookingId" class="form-control" placeholder="Enter booking ID or scan QR code">
              <button class="btn btn-primary" type="button" id="validateBtn">Validate</button>
            </div>
            <div class="form-text">Enter the booking ID or scan the QR code to validate a ticket.</div>
          </div>
          
          <div id="validationResult" class="mt-4">
            <!-- Validation results will appear here -->
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.getElementById('validateBtn').addEventListener('click', async function() {
  const bookingId = document.getElementById('bookingId').value.trim();
  const resultDiv = document.getElementById('validationResult');
  
  if (!bookingId) {
    resultDiv.innerHTML = `
      <div class="alert alert-warning">
        <h5>‚ö†Ô∏è Please enter a booking ID</h5>
      </div>
    `;
    return;
  }
  
  // Show loading state
  resultDiv.innerHTML = `
    <div class="text-center">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>
  `;
  
  try {
    // In a real app, you would make an API call to validate the ticket
    // For this demo, we'll simulate the validation
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Simulate validation result (in a real app, this would come from the server)
    const isValid = Math.random() > 0.3; // 70% chance of valid ticket
    
    if (isValid) {
      resultDiv.innerHTML = `
        <div class="alert alert-success">
          <h5>‚úÖ Valid Ticket</h5>
          <p><strong>Booking ID:</strong> ${bookingId}</p>
          <p><strong>Event:</strong> Sample Concert</p>
          <p><strong>Date:</strong> <%= new Date().toLocaleDateString('en-IN', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }) %></p>
          <p><strong>Status:</strong> <span class="badge bg-success">CONFIRMED</span></p>
          <button class="btn btn-success mt-2" onclick="markAsUsed('${bookingId}')">Mark as Used</button>
        </div>
      `;
    } else {
      resultDiv.innerHTML = `
        <div class="alert alert-danger">
          <h5>‚ùå Invalid Ticket</h5>
          <p>The ticket with booking ID <strong>${bookingId}</strong> is not valid.</p>
          <p>Possible reasons:</p>
          <ul>
            <li>Ticket has been cancelled</li>
            <li>Ticket has already been used</li>
            <li>Invalid booking ID</li>
          </ul>
        </div>
      `;
    }
  } catch (error) {
    resultDiv.innerHTML = `
      <div class="alert alert-danger">
        <h5>‚ö†Ô∏è Validation Error</h5>
        <p>There was an error validating the ticket. Please try again.</p>
      </div>
    `;
  }
});

function markAsUsed(bookingId) {
  const resultDiv = document.getElementById('validationResult');
  resultDiv.innerHTML = `
    <div class="alert alert-info">
      <h5>üîÑ Marking as Used</h5>
    </div>
  `;
  
  // Simulate API call
  setTimeout(() => {
    resultDiv.innerHTML = `
      <div class="alert alert-success">
        <h5>‚úÖ Ticket Marked as Used</h5>
        <p>The ticket with booking ID <strong>${bookingId}</strong> has been successfully marked as used.</p>
      </div>
    `;
  }, 1000);
}

// Allow Enter key to trigger validation
document.getElementById('bookingId').addEventListener('keypress', function(e) {
  if (e.key === 'Enter') {
    document.getElementById('validateBtn').click();
  }
});
</script>